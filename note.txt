Integrating Login API


EXPLAINING THE USERCONTEXT

Sure! Here's a 10-line explanation of your code:

1. This React component creates a `UserContext` to manage and share user data across the app.  
2. Inside `UserProvider`, it sets up `user` and `loading` states using `useState`.  
3. On component mount, `useEffect` runs to fetch the user's profile if not already loaded.  
4. If no token is found in localStorage, loading is set to false and the function exits.  
5. If a token exists, it makes a request to the backend to get the logged-in user's data.  
6. If the request is successful, it stores the user data in state.  
7. If it fails (e.g. token invalid), it logs the error and clears the user state and token.  
8. `updateUser` sets the user data and stores the token in localStorage after login.  
9. `clearUser` clears both the user state and token from localStorage (e.g. on logout).  
10. The provider makes user-related values and functions available to all child components.



************************************************
WHY IS USERCONTEXT IMPORTANT
*************************************************
Great question! The **User Context** is important because it acts as a **central place to store and access the logged-in user's data** throughout your React app. Here’s why it matters, in simple terms:

1. **Global Access**: It lets any component (at any level) access the current user's info without needing to pass props down manually.
2. **Authentication Status**: It stores whether the user is logged in or not (based on `user` being null or not), which is essential for protecting routes.
3. **Reusability**: Instead of fetching user data in every component, you do it once in the context and reuse it everywhere.
4. **Session Management**: It keeps track of login/logout state, stores the token, and can update or clear the user when needed.
5. **Conditional Rendering**: You can show different UI (e.g. admin vs user dashboard) based on `user.role` directly from the context.
6. **Navigation Logic**: Helps redirect users to the right page after login, based on who they are.
7. **Cleaner Code**: Removes repetitive logic for handling user state across multiple components.
8. **Persistent State**: Combined with `localStorage`, it helps maintain user sessions even after a page refresh.
9. **Security Control**: You can restrict access to certain parts of the app unless a valid user is present in the context.
10. **Better UX**: Shows a loading spinner while checking login status, giving a smooth experience during app startup.


********************************************************
EXPLAINING THE LOGIN API CALL 

Here’s a clear 10-line explanation of the login API call:

1. It sends a POST request to the login API using `axiosInstance`, passing the user's email and password.  
2. If successful, the server responds with user data including a `token` and `role`.  
3. The `token` is saved to `localStorage` for authenticating future requests.  
4. `updateUser` is called to store the logged-in user's data in context (e.g. name, email, role).  
5. The user is redirected based on their role: admin users go to `/admin/dashboard`, others to `/user/dashboard`.  
6. If the login fails, it enters the `catch` block to handle errors.  
7. It checks if there's an error message returned by the server and sets it to show to the user.  
8. If no specific message is available, it displays a generic error.  
9. This ensures smooth handling of login success and failure with proper feedback.  
10. Overall, it securely logs in a user, stores their session, and routes them accordingly.

************************************************************
IN APP.JS we configure automatic redirrction 

1. You're pulling user and loading from your UserContext, which gives you access to the logged-in user's info and loading state.

2. While the app is still checking if the user is logged in (loading is true), you show <Outlet />. This usually means you're letting child routes render while waiting.

3. If there’s no user logged in, redirect them to the login page.

4.  If a user is logged in, it checks their role:
If admin, redirect to /admin/dashboard
Otherwise, redirect to /user/dashboard

What this means overall:
This Root component is like a smart starting gate for your app. It decides where to send a user based on:
Whether you're still checking login status
Whether they’re logged in
What type of user they are
It helps with auto-redirecting users to the right dashboard right after login or page refresh. Clean and efficient!