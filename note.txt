API CALL TO GET ALL TASK, CREATING TAB FILTERS, DISPLAYING TASK CARD IN A GRID.

Task Management Dashboard - Code Explanation
This is a React component for a task management dashboard that allows administrators to view, filter, and manage tasks. Let's break it down comprehensively:

1. Imports and Initial Setup
React and Hooks: Basic React imports including useEffect and useState
Layout: Uses a DashboardLayout component as the page wrapper
Routing: useNavigate from React Router for navigation
API: Custom axios instance and API paths for backend communication
UI Components: Imported icons and custom components for the interface

2. Component Definition and State
State Variables:
allTasks: Stores the list of tasks fetched from the API
tabs: Stores status summary data for filtering tabs
filterStatus: Tracks which filter is currently active ("All", "Pending", etc.)
Navigation Hook: useNavigate for programmatic routing

3. Core Functions
* Fetching Tasks (getAllTasks)
Makes an API call to get tasks, optionally filtered by status
Handles the response by:
Setting the task list (empty array if no tasks)
Processing status summary data into a standardized format
Maintaining consistent order of status tabs
Includes error handling and logging

* Navigation Handler (handleClick)
Navigates to the task creation/editing page
Passes the task data as state for editing existing tasks

*Report Download Handler
Currently empty - would contain logic to download task reports

4 Effect Hook
Triggers task fetching whenever the filter status changes
Cleanup function is empty (no cleanup needed)

5. UI Rendering
Main Layout Structure:Wraps everything in a DashboardLayout with "Manage Task" highlighted in menu
Header Section:Responsive header with:
Title ("My Tasks")
Download report button (mobile and desktop versions)
Status filter tabs (only shown if there are tasks)
Uses the TaskStatusTab component for filtering

Task Cards Grid: Responsive grid (1 column on mobile, 3 on desktop)

Maps through allTasks to render TaskCard components

Passes all relevant task data to each card

Sets up click handler for editing tasks

Key Features
Task Filtering:

Users can filter tasks by status (All, Pending, In Progress, Completed)

Filtering happens automatically when status is changed

Responsive Design:

Adapts layout for mobile and desktop

Different button placements based on screen size

Task Management:

Shows comprehensive task information in card format

Allows quick access to edit tasks

Status Tracking:

Visual indicators of task status and progress

Counts shown for each status category

Future-Proofing:

Placeholder for report download functionality

Clean error handling structure

Component Relationships
Parent: DashboardLayout provides the overall page structure

Children:

TaskStatusTab: Handles status filtering UI

TaskCard: Displays individual task information

Data Flow:

Component mounts → Fetches all tasks

User changes filter → Triggers new fetch

API returns data → Updates state → Re-renders UI

User clicks task → Navigates to edit page
This component provides a clean, functional interface for administrators to manage tasks with clear status tracking and easy access to task details.



********************************************************************* EXPLAIN TaskStatusTab COMPONENT *********************

Here's a concise 10-line explanation of the `TaskStatusTab` component:

1. This is a tabbed navigation component for filtering tasks by status (All/Pending/In Progress/Completed).  
2. It receives three props: `activeTab` (current selection), `tabs` (array of tab objects), and `setActiveTab` (state setter).  
3. Renders a horizontal row of clickable tabs using flexbox layout.  
4. Each tab shows its label (status type) and a count of tasks in that status.  
5. The active tab is highlighted with primary color text and an underline.  
6. Inactive tabs show gray text that darkens on hover.  
7. Count badges are styled differently for active (colored) vs inactive (gray) tabs.  
8. Clicking any tab triggers `setActiveTab` to update the filter.  
9. Uses absolute positioning for the active tab's bottom border indicator.  
10. Designed responsively with padding that adjusts between mobile (`px-3`) and desktop (`md:px-4`).  

This component provides visual status filtering with clear active-state indicators and task counts for each category.

************************************************************************* EXPLAIN TASKCARD COMPONENT************************

Here's a 15-line explanation of the `TaskCard` component:

1. **Purpose**: Displays a task card with comprehensive details in a visually organized layout  
2. **Props**: Accepts 13 properties including title, description, priority, status, dates, assignees, and click handler  
3. **Progress Calculation**: Computes progress percentage from completed todos if not explicitly provided  
4. **Status Handling**: Normalizes status text and assigns color-coded styling (blue for In Progress, green for Completed, purple default)  
5. **Priority Styling**: Applies color schemes based on priority (red for High, amber for Medium, green for Low)  
6. **Visual Hierarchy**: Uses border-left colors to reinforce status at a glance  
7. **Content Display**: Shows truncated title/description (2 lines max) with proper line clamping  
8. **Progress Tracking**: Includes a progress bar and todo completion count (e.g., "3/5 tasks done")  
9. **Date Formatting**: Uses Moment.js to display clean date formats (e.g., "15th May 2024")  
10. **Assignee Display**: Shows profile pictures in an `AvatarGroup` component  
11. **Attachment Indicator**: Displays paperclip icon with attachment count in a blue badge  
12. **Interactive Design**: Entire card is clickable with hover effects via shadow and cursor pointer  
13. **Responsive Styling**: Uses Tailwind CSS for consistent spacing and responsive layout  
14. **Error Handling**: Safeguards against missing/null values for progress, attachments, and todo counts  
15. **Accessibility**: Semantic HTML structure with proper text contrast ratios for readability  

This component effectively condenses complex task information into an organized, scannable card while maintaining visual consistency through its status-driven color system.

***********************************************************************EXPLAIN PROGRESS COMPONENT***************************
Here's a concise 10-line explanation of the `Progress` component:

1. **Purpose**: A visual progress bar that shows task completion percentage  
2. **Props**: Accepts `progress` (0-100) and `status` (string) to determine styling  
3. **Dynamic Coloring**: Uses `getColor()` to switch colors based on task status  
4. **Status Cases**: Blue for "In Progress", indigo for "Completed", purple for default/other states  
5. **Base Structure**: Gray background bar with colored progress indicator overlay  
6. **Styling**: Uses Tailwind CSS for consistent rounded corners and thin bar height (1.5)  
7. **Progress Control**: Width dynamically set via inline style based on `progress` prop  
8. **Accessibility**: Semantic div structure without text for pure visual representation  
9. **Lightweight**: Pure presentational component with no internal state  
10. **Reusability**: Designed for integration with task management systems  

This component provides immediate visual feedback about task advancement while correlating colors with workflow stages.