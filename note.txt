CREATING THE DASHBOARD PAGE LAYOUT

data.js explained.

Here’s an explanation of the code in simple terms:

1. It imports various icons from the `react-icons/lu` library to be used in the sidebar menus.

2. `ADMIN_SIDEBAR` is an array that defines all sidebar links for **admin users**, including labels like Dashboard, Manage Loans, Users, etc., along with the paths and corresponding icons.

3. `USER_SIDEBAR` is a similar array for **normal users**, with options like My Loans, Apply for Loan, and Repayments — tailored to user functionality.

4. Each sidebar item includes an `id`, `label` (text to show), `icon` (React icon component), and `path` (URL to navigate to).

5. `LOAN_STATUS_DATA` is a list of loan status options used in the app — each with a `label` (display name) and `value` (internal code), representing different stages like Approved, Active, Overdue, etc.

This setup helps you dynamically render sidebars and dropdowns based on user role or loan status without hardcoding UI components. Would you like help using this data in a sidebar component?

********************************************************
Explaining DashboardLayout component

Here's a clear explanation of the DashboardLayout component:

It imports UserContext to access the logged-in user’s data and wraps the layout for dashboard pages.

The Navbar is rendered at the top of the page and receives activeMenu as a prop to highlight the current section.

If a user is logged in (user exists), the main layout with SideMenu and content is displayed.

The layout uses Flexbox: SideMenu is on the side, and children (the main page content) grows to fill the rest.

This layout ensures that all dashboard pages share a consistent navbar and sidebar, while allowing dynamic content in the middle.


********************************************************
Navbar component explained

Here’s an explanation of the `Navbar` component:

1. It uses `useState` to manage `openSideMenu`, which controls whether the sidebar is shown on smaller screens.  
2. A button toggles between a hamburger (`HiOutlineMenu`) and close (`HiOutlineX`) icon, only visible on small screens (`lg:hidden`).  
3. The navbar is styled with a sticky position, dark background, and some padding for visibility and layout.  
4. When `openSideMenu` is `true`, it renders the `SideMenu` as a dropdown overlay below the navbar for mobile use.  
5. It displays the app name “Easyloan” and supports passing `activeMenu` to highlight the current section.

This makes the navigation responsive, providing a collapsible sidebar on mobile while keeping it fixed and styled on larger screens. Want help making it auto-close when a menu item is clicked?


******************************************************************
SideMenu component explained 

Here's a concise explanation of the `SideMenu` component:

1. It displays a vertical sidebar menu customized based on the logged-in user's role (admin or user).  
2. It pulls user data and the `clearUser` function from the `UserContext`.  
3. On mount (`useEffect`), it sets `SideMenuData` using either `ADMIN_SIDEBAR` or `USER_SIDEBAR` depending on the user's role.  
4. The user's profile picture, name, and email are shown at the top of the sidebar, with an "Admin" tag if applicable.  
5. Each menu item is a button that navigates to a specific route or logs the user out when "logout" is clicked.  
6. Styling highlights the active menu item using the `activeMenu` prop.  
7. If `logout` is selected, it clears the token, resets user state, and redirects to the login page.  
8. Icons are displayed next to each label using dynamic imports from the sidebar data.  
9. The sidebar is styled to be fixed under the navbar, scrollable if needed, and responsive.  
10. This component ensures role-based navigation and quick access to key dashboard sections.

Would you like to make this menu collapsible or support dark mode?


*******************************************************
The DashboardLayout is then used in Admin Dashboard page

