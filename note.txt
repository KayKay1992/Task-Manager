Integrating Signup Api call

Explaining signup Api call in signup.jsx file

Here’s a 10-line explanation of the SignUp API call:
1. It checks if a `profilePic` is provided and uploads it using `uploadImage()`.  
2. The uploaded image URL is saved as `profileImageUrl` to be sent with the registration data.  
3. Sends a POST request to the registration endpoint with name, email, password, image URL, and an optional `adminInviteToken`.  
4. If the registration is successful, it receives a `token` and `role` from the server.  
5. The `token` is stored in `localStorage` for future authenticated requests.  
6. `updateUser()` saves the full user data to context for global access across the app.  
7. Based on the user's role, it redirects to either the admin or user dashboard.  
8. If an error occurs during the signup process, it's caught in the `catch` block.  
9. If the server sends an error message, it is shown to the user using `setError()`.  
10. If no specific error is sent, a general error message is shown instead.

we initialize the updateUser using the useContext and passing the UserContext to it.
we also initialize the useNavigate.
we also declared a profileImageUrl variable.

*********************************************
in utils folder we created an uploadImage file this is what it does 

It creates a FormData object and appends the image file to it under the key 'image'.
Sends a POST request to the image upload API using axiosInstance, with multipart/form-data headers.
If the upload is successful, it returns the response data (likely containing the image URL).
If there's an error, it logs the issue and throws the error to be handled by the calling function.
The function is exported for use wherever image uploads are needed in the app.

*************************************************
we created a useUserAuth hook in the hook folder this is what it does

Here’s a 5-line explanation of the useUserAuth custom hook:
It accesses user, loading, and clearUser from UserContext, and gets the navigate function from React Router.
Inside useEffect, it waits until loading is finished before doing anything.
If a user exists, it does nothing (user is authenticated).
If no user is found, it clears any leftover data and redirects to the login page.
This hook is used to protect routes by ensuring only authenticated users can access them.

********************************************************
we pasrse the hook in userDashboard and adminDashboard 

It imports useUserAuth, a custom hook that checks if the user is authenticated; if not, it redirects to the login page.
The hook runs immediately when the component loads, protecting the route from unauthorized access.
It uses useContext to access the logged-in user's data from UserContext.
It renders a simple dashboard showing the user data as a JSON string inside the page.
If no user is logged in, the user is automatically redirected, so this page only shows for authenticated users.