Integrating Delete Task API

Hereâ€™s a concise 10-line explanation of the `deleteTask` function:  

1. **Async Function**: `deleteTask` is an asynchronous function for deleting a task.  
2. **API Call**: Uses `axiosInstance.delete()` to send a request to the `DELETE_TASK` endpoint with the `taskId`.  
3. **Success Handling**: On success, it closes the delete alert (`setOpenDeleteAlert(false)`).  
4. **Toast Notification**: Shows a success toast message: *"Task details deleted successfully"*.  
5. **Navigation**: Redirects to `/admin/tasks` after deletion.  
6. **Error Handling**: Wrapped in a `try-catch` block to catch errors.  
7. **Error Logging**: Logs errors to the console with detailed error messages.  
8. **Error Response**: Prioritizes `error.response.data.message`, falling back to `error.message`.  
9. **No State Update on Error**: Fails silently (no UI feedback, just logging).  
10. **Axios Instance**: Uses a predefined `axiosInstance` for consistent API requests (e.g., with auth headers).  

This function ensures secure task deletion with user feedback and error logging.


***********************************************************
for modal component

1. **Modal Component**: Renders a popup (`Modal`) when `openDeleteAlert` is `true` and closes it when `onClose` is triggered.  
2. **Title & Content**: Displays the title *"Delete Task"* and a confirmation message (*"Are you sure..."*) via the `DeleteAlert` component.  
3. **Delete Action**: Passes the `deleteTask` function to `DeleteAlert` to execute when the user confirms deletion.  
4. **State Control**: Toggles visibility using `setOpenDeleteAlert(false)` on close or deletion.

*************************************************************
For DeleteAlert component
1. **Component Definition**: `DeleteAlert` is a reusable React component that displays a confirmation message and a delete button.  
2. **Props**: Accepts `content` (the confirmation text) and `onDelete` (a function triggered when the button is clicked).  
3. **Structure**: Renders the `content` in a paragraph and a styled **"Delete"** button aligned to the right.  
4. **Styling**: The button has red-themed styling (`text-rose-500`, `bg-rose-50`, etc.) for visual emphasis.  
5. **Export**: The component is exported for use in other parts of the application.