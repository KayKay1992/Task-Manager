Integrating axiosInstance for reuseable http requests

Sure! Here's a 10-line explanation of the code:

1. Imports `axios` and a custom `BASE_URL` to set up a reusable HTTP client.  
2. Creates an `axiosInstance` with a 10-second timeout and default headers for JSON requests.  
3. The request interceptor adds an `Authorization` header if a token exists in localStorage.  
4. This allows sending authenticated requests using the token saved after login.  
5. If no token is found, the request proceeds without the `Authorization` header.  
6. The response interceptor checks for error responses from the server.  
7. If a 401 (unauthorized) error occurs, the user is redirected to the login page.  
8. If a 500 (server error) occurs, an error message is logged in the console.  
9. If the request times out, it logs a timeout message.  
10. Finally, the customized `axiosInstance` is exported for use throughout the app.